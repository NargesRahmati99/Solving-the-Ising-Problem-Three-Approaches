# -*- coding: utf-8 -*-
"""Classical Ising solution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MBNhW6VZXddMTZf265Oqsvkq1qmdWerw
"""

import numpy as np
import itertools
# Set a constant seed for reproducibility
random_seed = 42
# Define the interaction matrix J with random values
J = np.random.uniform(-1, 1, size=(10, 10))

# Generate all possible spin configurations
spin_configurations = list(itertools.product([-1, 1], repeat=10))

# Function to calculate energy for a given configuration
def calculate_energy(spins, J):
    energy = 0
    for i in range(len(spins)):
        for j in range(i, len(spins)):
            energy += J[i, j] * spins[i] * spins[j]
    return energy

# Calculate energies for all configurations
energies = [calculate_energy(spins, J) for spins in spin_configurations]

# Find the configuration with the minimum energy
min_energy_index = np.argmin(energies)
ground_state = spin_configurations[min_energy_index]
ground_energy = energies[min_energy_index]

print(f"Classical ground state: {ground_state}")
print(f"Classical ground energy: {ground_energy}")